apply plugin: "application"
apply plugin: "jacoco"
apply plugin: "antlr"
apply plugin: "pmd"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

mainClassName = "com.kasirgalabs.etumulator.ETUmulator"

repositories {
    mavenCentral()
}

dependencies {
    antlr group: "org.antlr", name: "antlr4", version: "4.6"
    testCompile group: "junit", name: "junit", version: "4.12"
    compile group: "com.google.inject", name: "guice", version: "4.1.0"
    compile group: "org.fxmisc.richtext", name: "richtextfx", version: "0.7-M3"
}

tasks.withType(Test) {
    testLogging {
        events "FAILED", "PASSED", "SKIPPED", "STANDARD_ERROR"
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        afterSuite { desc, result ->
            if(!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = "|  ", endItem = "  |"
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
            }
        }
    }
}

pmd {
    consoleOutput = true
    ignoreFailures = true
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

generateGrammarSource {
    arguments += ["-package", "com.kasirgalabs.arm", "-visitor", "-no-listener", "-long-messages"]
    doLast {
        copy {
            from "build/generated-src/antlr/main/"
            include "*.java"
            into "src/main/java/com/kasirgalabs/arm"
        }
        delete "build/generated-src/antlr"
    }
}

jar {
    manifest {
        attributes "Main-Class": mainClassName
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(
            classDirectories.files.collect {
                fileTree(dir: it, exclude: "com/kasirgalabs/arm/**")
            })
    }
    reports {
        xml.enabled true
        html.enabled true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.10"
}
